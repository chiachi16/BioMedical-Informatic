library(readr)
MLL_train <- read_delim("C:/Users/hec6/Downloads/MLL_train.xls",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
MLL_train <- read_delim("C:/Users/hec6/Downloads/MLL_train.xls",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(MLL_train)
MLL_train <- read_delim("C:/Users/hec6/Downloads/MLL_train.xls",
"\t", escape_double = FALSE, trim_ws = TRUE)
MLL_train <- read_delim("C:/Users/hec6/Downloads/MLL_train.xls",
"\t", escape_double = FALSE, trim_ws = TRUE)
MLL_train <- read_delim("C:/Users/hec6/Downloads/MLL_train.xls",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(MLL_train)
library(readr)
MLL_train <- read_delim("C:/Users/hec6/Downloads/MLL_train.xls",
"\t", escape_double = FALSE, trim_ws = TRUE)
MLL_Select<-MLL_train[-grep("AFFX",MLL_train$Name),]
MLL<-as.matrix(MLL_Select[,-c(1,2)])
nor<-function(x){
min.x<-min(x)
max.x<-max(x)
(x-min.x)/(max.x-min.x)
}
MLL_nor<-t(apply(MLL,1,nor))
table(MLL_nor)
table(as.na(MLL_nor))
table(is.na(MLL_nor))
is.na(MLL_nor)
View(MLL_train)
library(readr)
MLL_train<- read_delim("C:/Users/hec6/Downloads/MLL_train_new.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MLL_Select<-MLL_train[-grep("AFFX",MLL_train$Name),]
MLL<-as.matrix(MLL_Select[,-c(1,2)])
nor<-function(x){
min.x<-min(x)
max.x<-max(x)
(x-min.x)/(max.x-min.x)
}
MLL_nor<-t(apply(MLL,1,nor))
table(is.na(MLL_nor))
rownames(MLL_nor)
View(MLL)
View(MLL_Select)
rownames(MLL_nor)<-MLL_Select$Name
View(MLL_nor)
head(sort(apply(MLL_nor,1,test1)),10)
##T-test
##condition1
test1<-function(x){
t.test(x[1:20],x[21:57],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test1)),10)
View(MLL_nor)
##condition2
test2<-function(x){
t.test(x[21:37],x[c(1:20,38:57)],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test2)),10)
##condition1
test3<-function(x){
t.test(x[38:57],x[1:37],alternative = "greater")$p.value
}
source('C:/Users/hec6/Downloads/R/HW1.R', echo=TRUE)
##Use SVM to execute the classification process
##A 3-class classification problem using all genes
x<-MLL_nor
##Use SVM to execute the classification process
##A 3-class classification problem using all genes
x<-t(MLL_nor)
View(x)
y<-t(MLL_nor)
colnames(y)
colnames(y[1:20])
colnames(y[1:20,])
rownames(y[1:20,])
rownames(y[1:20,])<-ALL
rownames(y[1:20,])<-ALL
rownames(y[1:20,])<-"ALL"
rownames(y[1:20,])<-c("ALL")
seq(ALL,1:20)
seq("ALL",1:20)
##Use SVM to execute the classification process
##A 3-class classification problem using all genes
x1_test<-t(MLL_nor)
y1_train<-t(MLL_nor)
svm1<-svm(x1_test,y1_train)
?svm
??svm
svm1<-SVM(x1_test,y1_train)
svn(x1_test,y1_train)
svm(x1_test,y1_train)
install.packages("svm")
svm(x1_test,y1_train)
install.packages("e1071")
library(e1071)
svm(x1_test,y1_train)
SVM1<-svm(x1_test,y1_train)
for(n in 1:20){colnames(y1_train[n])<-ALL}
for(n in 1:20){rownames(y1_train[n])<-"ALL"}
for(n in 1:20){rownames(y1_train[n,])<-"ALL"}
rownames(y1_train[1,])<-"ALL"
y1_train[1,]
rownames(y1_train[1,])
View(y1_train)
rownames(y1_train[1])
rownames(y1_train[1:20,])
rownames(y1_train[1,])<-"ALL"
rownames(y1_train[1,])<-c("ALL")
rownames(y1_train[1,])
rownames(y1_train[1:2,])<-c("ALL")
rownames(y1_train[1:2,])
rownames(y1_train[1:2,])<-c("ALL","ALL")
View(y1_train)
View(y1_train)
rownames(y1_train[1:2,])<-c("ALL","ALL")
rownames(y1_train[1:2,])
rownames(y1_train[1:2,])<-("ALL","ALL")
rownames(y1_train[1:2,])<-"ALL","ALL"
rownames(y1_train[1:2,])<-"ALL"
View(y)
rownames(y1_train[1:2,])<-NULL
View(y1_train)
MLL_train<- read_delim("C:/Users/hec6/Downloads/MLL_train_new.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MLL_Select<-MLL_train[-grep("AFFX",MLL_train$Name),]
MLL<-as.matrix(MLL_Select[,-c(1,2)])
nor<-function(x){
min.x<-min(x)
max.x<-max(x)
(x-min.x)/(max.x-min.x)
}
MLL_nor<-t(apply(MLL,1,nor))
rownames(MLL_nor)<-MLL_Select$Name
##T-test
##condition1
test1<-function(x){
t.test(x[1:20],x[21:57],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test1)),10)
##condition2
test2<-function(x){
t.test(x[21:37],x[c(1:20,38:57)],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test2)),10)
##condition1
test3<-function(x){
t.test(x[38:57],x[1:37],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test3)),10)
##Use SVM to execute the classification process
##A 3-class classification problem using all genes
x1_test<-t(MLL_nor)
y1_train<-t(MLL_nor)
rownames(y1_train[1:2,])<-NULL
View(y1_train)
View(x1_test)
rownames(y1_train[])<-NULL
rownames(y1_train)<-NULL
View(y1_train)
for(n in 1:20){rownames(y1_train[n,])<-"ALL"}
View(x1_test)
rownames(y1_train)<-c("ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL",
"ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL",
"MLL","MLL","MLL","MLL","MLL","MLL","MLL","MLL","MLL","MLL",
"MLL","MLL","MLL","MLL","MLL","MLL","MLL","AML","AML","AML",
"AML","AML","AML","AML","AML","AML","AML","AML","AML","AML",
"AML","AML","AML","AML","AML","AML","AML",)
rownames(y1_train)<-c("ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL",
"ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL",
"MLL","MLL","MLL","MLL","MLL","MLL","MLL","MLL","MLL","MLL",
"MLL","MLL","MLL","MLL","MLL","MLL","MLL","AML","AML","AML",
"AML","AML","AML","AML","AML","AML","AML","AML","AML","AML",
"AML","AML","AML","AML","AML","AML","AML")
View(y1_train)
##Use SVM to execute the classification process
##A 3-class classification problem using all genes
x1_test<-t(MLL_nor)
y1_train<-t(MLL_nor)
SVM1<-svm(x1_test,y1_train)
y1_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+"|"^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("AML_\\d+","AML","AML",c(rownames(x1_test[38:57,])))
))
y1_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("AML_\\d+","AML","AML",c(rownames(x1_test[38:57,])))
))
y1_train
SVM1<-svm(x1_test,y1_train)
y1_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("AML_\\d+","AML",c(rownames(x1_test[38:57,])))
))
SVM1<-svm(x1_test,y1_train)
summary(SVM1)
Result1<-predict(SVM1,x1_test)
result1<-predict(SVM1,x1_test)
table(result1,y1_train)
y2_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(x1_test[21:57,])))))
##Three 2-class classification problems, each case using all genes
###condition1
x2_test<-t(MLL_nor)
SVM2<-svm(x2_test,y2_train)
summary(SVM2)
result2<-predict(SVM2,x2_test)
##confusion matrix
table(result2,y2_train)
###condition2
x3_test<-t(MLL_nor)
y3_train<-as.factor(c(gsub("^MLL_\\d+|^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("^ALL_\\d+|AML_\\d+","ALL/AML",c(rownames(x1_test[c(1:20,38:57)])))))
SVM3<-svm(x3_test,y3_train)
x1_test[c(1:20,38:57)]
y3_train<-as.factor(c(gsub("^MLL_\\d+|^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("^ALL_\\d+|AML_\\d+","ALL/AML",c(rownames(x1_test[c(1:20,38:57),])))))
SVM3<-svm(x3_test,y3_train)
summary(SVM3)
C1<-head(sort(apply(MLL_nor,1,test1)),10)
head(sort(apply(MLL_nor,1,test1)),10)
##Three 2-class classification problems, each case using 10 selected genes
C1
##Three 2-class classification problems, each case using 10 selected genes
colnames(C1)
##Three 2-class classification problems, each case using 10 selected genes
rownames(C1)
##Three 2-class classification problems, each case using 10 selected genes
C1[1]
##Three 2-class classification problems, each case using 10 selected genes
colnames(C1)
##Three 2-class classification problems, each case using 10 selected genes
colnames(C1[1])
##Three 2-class classification problems, each case using 10 selected genes
colnames(C1[1,])
##Three 2-class classification problems, each case using 10 selected genes
str(C1)
C1$names
C1[names]
as.matrix(C1)
rownames(as.matrix(C1))
View(MLL_nor)
MLL_nor[rownames(MLL_nor)=="1389_at",]
rbind(
MLL_nor[rownames(MLL_nor)=="1389_at",],MLL_nor[rownames(MLL_nor)=="34168_at",],
MLL_nor[rownames(MLL_nor)=="36239_at",],MLL_nor[rownames(MLL_nor)=="39556_at",],
MLL_nor[rownames(MLL_nor)=="32872_at",],MLL_nor[rownames(MLL_nor)=="35260_at",],
MLL_nor[rownames(MLL_nor)=="40570_at",],MLL_nor[rownames(MLL_nor)=="963_at",],
MLL_nor[rownames(MLL_nor)=="38521_at",],MLL_nor[rownames(MLL_nor)=="34237_at",]
)
ALLtop10<-rbind(MLL_nor[rownames(MLL_nor)=="1389_at",],MLL_nor[rownames(MLL_nor)=="34168_at",],
MLL_nor[rownames(MLL_nor)=="36239_at",],MLL_nor[rownames(MLL_nor)=="39556_at",],
MLL_nor[rownames(MLL_nor)=="32872_at",],MLL_nor[rownames(MLL_nor)=="35260_at",],
MLL_nor[rownames(MLL_nor)=="40570_at",],MLL_nor[rownames(MLL_nor)=="963_at",],
MLL_nor[rownames(MLL_nor)=="38521_at",],MLL_nor[rownames(MLL_nor)=="34237_at",])
View(ALLtop10)
rownames(ALLtop10)
rownames(ALLtop10)<-C1$name
rownames(ALLtop10)<-C1$names
rownames(ALLtop10)<-C1
View(ALLtop10)
as.matrix(C1)
rownames(ALLtop10)<-rownames(as.matrix(C1))
View(ALLtop10)
SVM3<-svm(ALLtop10,y3_train)
ALLtop10<-t(rbind(MLL_nor[rownames(MLL_nor)=="1389_at",],MLL_nor[rownames(MLL_nor)=="34168_at",],
MLL_nor[rownames(MLL_nor)=="36239_at",],MLL_nor[rownames(MLL_nor)=="39556_at",],
MLL_nor[rownames(MLL_nor)=="32872_at",],MLL_nor[rownames(MLL_nor)=="35260_at",],
MLL_nor[rownames(MLL_nor)=="40570_at",],MLL_nor[rownames(MLL_nor)=="963_at",],
MLL_nor[rownames(MLL_nor)=="38521_at",],MLL_nor[rownames(MLL_nor)=="34237_at",]))
rownames(ALLtop10)<-rownames(as.matrix(C1))
colnames(ALLtop10)<-rownames(as.matrix(C1))
y3_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(x1_test[21:57,])))))
SVM3<-svm(ALLtop10,y3_train)
summary(SVM3)
View(ALLtop10)
y3_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(ALLtop10[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(ALLtop10[21:57,])))))
SVM3<-svm(ALLtop10,y3_train)
summary(SVM3)
ALLtop10<-cbind(MLL_nor[rownames(MLL_nor)=="1389_at",],MLL_nor[rownames(MLL_nor)=="34168_at",],
MLL_nor[rownames(MLL_nor)=="36239_at",],MLL_nor[rownames(MLL_nor)=="39556_at",],
MLL_nor[rownames(MLL_nor)=="32872_at",],MLL_nor[rownames(MLL_nor)=="35260_at",],
MLL_nor[rownames(MLL_nor)=="40570_at",],MLL_nor[rownames(MLL_nor)=="963_at",],
MLL_nor[rownames(MLL_nor)=="38521_at",],MLL_nor[rownames(MLL_nor)=="34237_at",])
colnames(ALLtop10)<-rownames(as.matrix(C1))
y3_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(ALLtop10[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(ALLtop10[21:57,])))))
SVM3<-svm(ALLtop10,y3_train)
summary(SVM3)
result3<-predict(SVM3,ALLtop10)
##confusion matrix
table(result3,y3_train)
View(ALLtop10)
View(x1_test)
ALLtop10<-cbind(MLL_nor[rownames(MLL_nor)=="1389_at",],MLL_nor[rownames(MLL_nor)=="34168_at",],
MLL_nor[rownames(MLL_nor)=="36239_at",],MLL_nor[rownames(MLL_nor)=="39556_at",],
MLL_nor[rownames(MLL_nor)=="32872_at",],MLL_nor[rownames(MLL_nor)=="35260_at",],
MLL_nor[rownames(MLL_nor)=="40570_at",],MLL_nor[rownames(MLL_nor)=="963_at",],
MLL_nor[rownames(MLL_nor)=="38521_at",],MLL_nor[rownames(MLL_nor)=="34237_at",])
colnames(ALLtop10)<-rownames(as.matrix(C1))
y3_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(ALLtop10[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(ALLtop10[21:57,])))))
SVM3<-svm(ALLtop10,y3_train)
summary(SVM3)
MLL_train<- read_delim("C:/Users/hec6/Downloads/MLL_train_new.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MLL_Select<-MLL_train[-grep("AFFX",MLL_train$Name),]
MLL<-as.matrix(MLL_Select[,-c(1,2)])
nor<-function(x){
min.x<-min(x)
max.x<-max(x)
(x-min.x)/(max.x-min.x)
}
MLL_nor<-t(apply(MLL,1,nor))
rownames(MLL_nor)<-MLL_Select$Name
##T-test
##condition1
test1<-function(x){
t.test(x[1:20],x[21:57],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test1)),10)
##condition2
test2<-function(x){
t.test(x[21:37],x[c(1:20,38:57)],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test2)),10)
##condition1
test3<-function(x){
t.test(x[38:57],x[1:37],alternative = "greater")$p.value
}
head(sort(apply(MLL_nor,1,test3)),10)
##Use SVM to execute the classification process
##A 3-class classification problem using all genes
x1_test<-t(MLL_nor)
y1_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("AML_\\d+","AML",c(rownames(x1_test[38:57,])))))
SVM1<-svm(x1_test,y1_train)
summary(SVM1)
result1<-predict(SVM1,x1_test)
##confusion matrix
table(result1,y1_train)
##Three 2-class classification problems, each case using all genes
###condition1(ALL)
ALL_test<-t(MLL_nor)
ALL_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(x1_test[21:57,])))))
SVM_ALL<-svm(ALL_test,ALL_train)
summary(SVM_ALL)
result_ALL<-predict(SVM_ALL,ALL_test)
##confusion matrix
table(result2,ALL_train)
##confusion matrix
table(result_ALL,ALL_train)
###condition2(MLL)
MLL_test<-t(MLL_nor)
MLL_test
###condition2(MLL)
MLL_test<-t(MLL_nor)
MLL_train<-as.factor(c(gsub("^MLL_\\d+|^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("^ALL_\\d+|AML_\\d+","ALL/AML",c(rownames(x1_test[c(1:20,38:57),])))))
SVM_MLL<-svm(MLL_test,MLL_train)
summary(SVM_MLL)
result_MLL<-predict(SVM_MLL,MLL_test)
##confusion matrix
table(result_MLL,MLL_train)
###condition3(AML)
AML_test<-t(MLL_nor)
AML_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(x1_test[21:57,])))))
SVM_AML<-svm(AML_test,AML_train)
summary(SVM_AML)
###condition3(AML)
AML_test<-t(MLL_nor)
AML_train<-as.factor(c(gsub("AML_\\d+","AML",c(rownames(x1_test[38:57,]))),
gsub("^ALL_\\d+|^MLL_\\d+|^MLL__\\d+|","ALL/MLL",c(rownames(x1_test[1:37,])))))
SVM_AML<-svm(AML_test,AML_train)
summary(SVM_AML)
result_AML<-predict(SVM_AML,AML_test)
##confusion matrix
table(result_AML,AML_train)
##Three 2-class classification problems, each case using 10 selected genes
ALLtop10<-cbind(MLL_nor[rownames(MLL_nor)=="1389_at",],MLL_nor[rownames(MLL_nor)=="34168_at",],
MLL_nor[rownames(MLL_nor)=="36239_at",],MLL_nor[rownames(MLL_nor)=="39556_at",],
MLL_nor[rownames(MLL_nor)=="32872_at",],MLL_nor[rownames(MLL_nor)=="35260_at",],
MLL_nor[rownames(MLL_nor)=="40570_at",],MLL_nor[rownames(MLL_nor)=="963_at",],
MLL_nor[rownames(MLL_nor)=="38521_at",],MLL_nor[rownames(MLL_nor)=="34237_at",])
colnames(ALLtop10)<-rownames(as.matrix(C1))
C1<-head(sort(apply(MLL_nor,1,test1)),10)
colnames(ALLtop10)<-rownames(as.matrix(C1))
y3_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(ALLtop10[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+|AML_\\d+","MLL/AML",c(rownames(ALLtop10[21:57,])))))
SVM3<-svm(ALLtop10,y3_train)
summary(SVM3)
result3<-predict(SVM3,ALLtop10)
##confusion matrix
table(result3,y3_train)
View(ALLtop10)
View(AML_test)
View(ALL_test)
C2
C2<-head(sort(apply(MLL_nor,1,test2)),10)
C2
###condition2(MLL)
MLLtop10<-cbind(MLL_nor[rownames(MLL_nor)=="34306_at",],MLL_nor[rownames(MLL_nor)=="40763_at",],
MLL_nor[rownames(MLL_nor)=="1065_at",],MLL_nor[rownames(MLL_nor)=="34583_at",],
MLL_nor[rownames(MLL_nor)=="40797_at",],MLL_nor[rownames(MLL_nor)=="34785_at",],
MLL_nor[rownames(MLL_nor)=="35985_at",],MLL_nor[rownames(MLL_nor)=="36777_at",],
MLL_nor[rownames(MLL_nor)=="1914_at",],MLL_nor[rownames(MLL_nor)=="33936_at",])
SVM3<-svm(ALLtop10,ALL_train)
summary(SVM3)
result3<-predict(SVM3,ALLtop10)
result3_ALL<-predict(SVM3,ALLtop10)
##confusion matrix
table(result3_ALL,y3_train)
###condition2(MLL)
MLLtop10<-cbind(MLL_nor[rownames(MLL_nor)=="34306_at",],MLL_nor[rownames(MLL_nor)=="40763_at",],
MLL_nor[rownames(MLL_nor)=="1065_at",],MLL_nor[rownames(MLL_nor)=="34583_at",],
MLL_nor[rownames(MLL_nor)=="40797_at",],MLL_nor[rownames(MLL_nor)=="34785_at",],
MLL_nor[rownames(MLL_nor)=="35985_at",],MLL_nor[rownames(MLL_nor)=="36777_at",],
MLL_nor[rownames(MLL_nor)=="1914_at",],MLL_nor[rownames(MLL_nor)=="33936_at",])
colnames(MLLtop10)<-rownames(as.matrix(C2))
SVM3_MLL<-svm(MLLtop10,MLL_train)
summary(SVM3_MLL)
result3_MLL<-predict(SVM3_MLL,MLLtop10)
##confusion matrix
table(result3_MLL,MLL_train)
C3<-head(sort(apply(MLL_nor,1,test3)),10)
C3
###condition3(AML)
AMLtop10<-cbind(MLL_nor[rownames(MLL_nor)=="41752_at",],MLL_nor[rownames(MLL_nor)=="38710_at",],
MLL_nor[rownames(MLL_nor)=="41078_at",],MLL_nor[rownames(MLL_nor)=="36162_at",],
MLL_nor[rownames(MLL_nor)=="34408_at",],MLL_nor[rownames(MLL_nor)=="689_at",],
MLL_nor[rownames(MLL_nor)=="34294_at",],MLL_nor[rownames(MLL_nor)=="39448_r_at",],
MLL_nor[rownames(MLL_nor)=="34912_at",],MLL_nor[rownames(MLL_nor)=="37274_at",])
colnames(AMLtop10)<-rownames(as.matrix(C3))
SVM3_AML<-svm(AMLtop10,AML_train)
summary(SVM3_AML)
result3_AML<-predict(SVM3_AML,AMLtop10)
##confusion matrix
table(result3_AML,AML_train)
##A 3-class classification problem using the combination of 30 selected genes
x4_test<-cbind(ALLtop10,MLLtop10,AMLtop10)
View(x4_test)
x4_train<-as.factor(c(gsub("^ALL_\\d+","ALL",c(rownames(x1_test[1:20,]))),
gsub("^MLL_\\d+|^MLL__\\d+","MLL",c(rownames(x1_test[21:37,]))),
gsub("AML_\\d+","AML",c(rownames(x1_test[38:57,])))))
SVM4<-svm(x4_test,x4_train)
summary(SVM4)
result4<-predict(SVM4,x4_train)
SVM4<-svm(x4_test,x4_train)
summary(SVM4)
result4<-predict(SVM4,x4_train)
result4<-predict(SVM4,x4_test)
##confusion matrix
table(result4,x4_train)
